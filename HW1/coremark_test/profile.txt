Flat profile:

Each sample counts as 0.01 seconds.
  %   cumulative   self              self     total           
 time   seconds   seconds    calls   s/call   s/call  name    
 28.39      4.08     4.08 83866440     0.00     0.00  core_list_reverse
 25.26      7.71     3.63 84688660     0.00     0.00  core_list_find
  9.19      9.03     1.32 420976640     0.00     0.00  core_state_transition
  8.77     10.29     1.26  1644440     0.00     0.00  matrix_mul_matrix_bitextract
  7.86     11.42     1.13 240088248     0.00     0.00  crcu8
  5.92     12.27     0.85  1644440     0.00     0.00  matrix_mul_matrix
  3.20     12.73     0.46   822220     0.00     0.00  core_bench_list
  2.44     13.08     0.35  6577760     0.00     0.00  matrix_sum
  2.30     13.41     0.33  1233331     0.00     0.00  core_list_mergesort
  2.16     13.72     0.31  1644440     0.00     0.00  core_bench_state
  1.11     13.88     0.16 91315058     0.00     0.00  calc_func
  0.77     13.99     0.11 85531654     0.00     0.00  cmp_idx
  0.70     14.09     0.10 45657529     0.00     0.00  cmp_complex
  0.63     14.18     0.09 120044124     0.00     0.00  crcu16
  0.49     14.25     0.07  1644440     0.00     0.00  matrix_mul_const
  0.35     14.30     0.05  3288880     0.00     0.00  matrix_add_const
  0.21     14.33     0.03 26311040     0.00     0.00  crcu32
  0.14     14.35     0.02 55088744     0.00     0.00  crc16
  0.14     14.37     0.02  1644440     0.00     0.00  matrix_mul_vect
  0.00     14.37     0.00  1644440     0.00     0.00  core_bench_matrix
  0.00     14.37     0.00  1644440     0.00     0.00  matrix_test
  0.00     14.37     0.00   822220     0.00     0.00  core_list_remove
  0.00     14.37     0.00   822220     0.00     0.00  core_list_undo_remove
  0.00     14.37     0.00       32     0.00     0.00  core_list_insert_new
  0.00     14.37     0.00       10     0.00     0.00  time_in_secs
  0.00     14.37     0.00        6     0.00     0.00  get_seed_args
  0.00     14.37     0.00        6     0.00     0.00  get_time
  0.00     14.37     0.00        6     0.00     2.39  iterate
  0.00     14.37     0.00        6     0.00     0.00  start_time
  0.00     14.37     0.00        6     0.00     0.00  stop_time
  0.00     14.37     0.00        1     0.00     0.00  check_data_types
  0.00     14.37     0.00        1     0.00     0.00  core_init_matrix
  0.00     14.37     0.00        1     0.00     0.00  core_init_state
  0.00     14.37     0.00        1     0.00     0.00  core_list_init
  0.00     14.37     0.00        1     0.00     0.00  portable_fini
  0.00     14.37     0.00        1     0.00     0.00  portable_free
  0.00     14.37     0.00        1     0.00     0.00  portable_init
  0.00     14.37     0.00        1     0.00     0.00  portable_malloc

 %         the percentage of the total running time of the
time       program used by this function.

cumulative a running sum of the number of seconds accounted
 seconds   for by this function and those listed above it.

 self      the number of seconds accounted for by this
seconds    function alone.  This is the major sort for this
           listing.

calls      the number of times this function was invoked, if
           this function is profiled, else blank.

 self      the average number of milliseconds spent in this
ms/call    function per call, if this function is profiled,
	   else blank.

 total     the average number of milliseconds spent in this
ms/call    function and its descendents per call, if this
	   function is profiled, else blank.

name       the name of the function.  This is the minor sort
           for this listing. The index shows the location of
	   the function in the gprof listing. If the index is
	   in parenthesis it shows where it would appear in
	   the gprof listing if it were to be printed.

Copyright (C) 2012-2022 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

		     Call graph (explanation follows)


granularity: each sample hit covers 4 byte(s) for 0.07% of 14.37 seconds

index % time    self  children    called     name
                                                 <spontaneous>
[1]    100.0    0.00   14.37                 main [1]
                0.00   14.37       6/6           iterate [2]
                0.00    0.00       1/1           core_list_init [24]
                0.00    0.00       4/120044124     crcu16 [16]
                0.00    0.00       4/240088248     crcu8 [14]
                0.00    0.00       4/55088744     crc16 [22]
                0.00    0.00      10/10          time_in_secs [28]
                0.00    0.00       6/6           get_seed_args [29]
                0.00    0.00       6/6           start_time [31]
                0.00    0.00       6/6           get_time [30]
                0.00    0.00       6/6           stop_time [32]
                0.00    0.00       1/1           portable_init [38]
                0.00    0.00       1/1           portable_malloc [39]
                0.00    0.00       1/1           core_init_state [35]
                0.00    0.00       1/1           core_init_matrix [34]
                0.00    0.00       1/1           check_data_types [33]
                0.00    0.00       1/1           portable_fini [36]
                0.00    0.00       1/1           portable_free [37]
-----------------------------------------------
                0.00   14.37       6/6           main [1]
[2]    100.0    0.00   14.37       6         iterate [2]
                0.46   13.90  822220/822220      core_bench_list [3]
                0.00    0.00  822220/120044124     crcu16 [16]
                0.00    0.00  822220/240088248     crcu8 [14]
-----------------------------------------------
                0.46   13.90  822220/822220      iterate [2]
[3]     99.9    0.46   13.90  822220         core_bench_list [3]
                0.33    5.37 1233330/1233331     core_list_mergesort [4]
                4.08    0.00 83866440/83866440     core_list_reverse [7]
                3.63    0.00 84688660/84688660     core_list_find [8]
                0.04    0.22 46866540/120044124     crcu16 [16]
                0.22    0.00 46866540/240088248     crcu8 [14]
                0.02    0.00 46866540/55088744     crc16 [22]
                0.00    0.00  822220/822220      core_list_remove [25]
                0.00    0.00  822220/822220      core_list_undo_remove [26]
-----------------------------------------------
                0.00    0.00       1/1233331     core_list_init [24]
                0.33    5.37 1233330/1233331     core_bench_list [3]
[4]     39.7    0.33    5.37 1233331         core_list_mergesort [4]
                0.10    5.16 45657529/45657529     cmp_complex [5]
                0.11    0.00 85531654/85531654     cmp_idx [19]
-----------------------------------------------
                0.10    5.16 45657529/45657529     core_list_mergesort [4]
[5]     36.6    0.10    5.16 45657529         cmp_complex [5]
                0.16    5.00 91315058/91315058     calc_func [6]
-----------------------------------------------
                0.16    5.00 91315058/91315058     cmp_complex [5]
[6]     35.9    0.16    5.00 91315058         calc_func [6]
                0.00    2.67 1644440/1644440     core_bench_matrix [9]
                0.31    1.88 1644440/1644440     core_bench_state [11]
                0.01    0.06 13155520/120044124     crcu16 [16]
                0.06    0.00 13155520/240088248     crcu8 [14]
                0.00    0.00 1644440/55088744     crc16 [22]
-----------------------------------------------
                4.08    0.00 83866440/83866440     core_bench_list [3]
[7]     28.4    4.08    0.00 83866440         core_list_reverse [7]
-----------------------------------------------
                3.63    0.00 84688660/84688660     core_bench_list [3]
[8]     25.3    3.63    0.00 84688660         core_list_find [8]
-----------------------------------------------
                0.00    2.67 1644440/1644440     calc_func [6]
[9]     18.6    0.00    2.67 1644440         core_bench_matrix [9]
                0.00    2.67 1644440/1644440     matrix_test [10]
-----------------------------------------------
                0.00    2.67 1644440/1644440     core_bench_matrix [9]
[10]    18.6    0.00    2.67 1644440         matrix_test [10]
                1.26    0.00 1644440/1644440     matrix_mul_matrix_bitextract [13]
                0.85    0.00 1644440/1644440     matrix_mul_matrix [15]
                0.35    0.00 6577760/6577760     matrix_sum [17]
                0.07    0.00 1644440/1644440     matrix_mul_const [20]
                0.05    0.00 3288880/3288880     matrix_add_const [21]
                0.00    0.03 6577760/120044124     crcu16 [16]
                0.03    0.00 6577760/240088248     crcu8 [14]
                0.02    0.00 1644440/1644440     matrix_mul_vect [23]
                0.00    0.00 6577760/55088744     crc16 [22]
-----------------------------------------------
                0.31    1.88 1644440/1644440     calc_func [6]
[11]    15.3    0.31    1.88 1644440         core_bench_state [11]
                1.32    0.00 420976640/420976640     core_state_transition [12]
                0.03    0.27 26311040/26311040     crcu32 [18]
                0.02    0.12 26311040/120044124     crcu16 [16]
                0.12    0.00 26311040/240088248     crcu8 [14]
-----------------------------------------------
                1.32    0.00 420976640/420976640     core_bench_state [11]
[12]     9.2    1.32    0.00 420976640         core_state_transition [12]
-----------------------------------------------
                1.26    0.00 1644440/1644440     matrix_test [10]
[13]     8.8    1.26    0.00 1644440         matrix_mul_matrix_bitextract [13]
-----------------------------------------------
                0.00    0.00       4/240088248     main [1]
                0.00    0.00  822220/240088248     iterate [2]
                0.03    0.00 6577760/240088248     matrix_test [10]
                0.06    0.00 13155520/240088248     calc_func [6]
                0.12    0.00 26311040/240088248     core_bench_state [11]
                0.12    0.00 26311040/240088248     crcu32 [18]
                0.22    0.00 46866540/240088248     core_bench_list [3]
                0.56    0.00 120044124/240088248     crcu16 [16]
[14]     7.9    1.13    0.00 240088248         crcu8 [14]
-----------------------------------------------
                0.85    0.00 1644440/1644440     matrix_test [10]
[15]     5.9    0.85    0.00 1644440         matrix_mul_matrix [15]
-----------------------------------------------
                0.00    0.00       4/120044124     main [1]
                0.00    0.00  822220/120044124     iterate [2]
                0.00    0.03 6577760/120044124     matrix_test [10]
                0.01    0.06 13155520/120044124     calc_func [6]
                0.02    0.12 26311040/120044124     core_bench_state [11]
                0.02    0.12 26311040/120044124     crcu32 [18]
                0.04    0.22 46866540/120044124     core_bench_list [3]
[16]     4.6    0.09    0.56 120044124         crcu16 [16]
                0.56    0.00 120044124/240088248     crcu8 [14]
-----------------------------------------------
                0.35    0.00 6577760/6577760     matrix_test [10]
[17]     2.4    0.35    0.00 6577760         matrix_sum [17]
-----------------------------------------------
                0.03    0.27 26311040/26311040     core_bench_state [11]
[18]     2.1    0.03    0.27 26311040         crcu32 [18]
                0.02    0.12 26311040/120044124     crcu16 [16]
                0.12    0.00 26311040/240088248     crcu8 [14]
-----------------------------------------------
                0.11    0.00 85531654/85531654     core_list_mergesort [4]
[19]     0.8    0.11    0.00 85531654         cmp_idx [19]
-----------------------------------------------
                0.07    0.00 1644440/1644440     matrix_test [10]
[20]     0.5    0.07    0.00 1644440         matrix_mul_const [20]
-----------------------------------------------
                0.05    0.00 3288880/3288880     matrix_test [10]
[21]     0.3    0.05    0.00 3288880         matrix_add_const [21]
-----------------------------------------------
                0.00    0.00       4/55088744     main [1]
                0.00    0.00 1644440/55088744     calc_func [6]
                0.00    0.00 6577760/55088744     matrix_test [10]
                0.02    0.00 46866540/55088744     core_bench_list [3]
[22]     0.1    0.02    0.00 55088744         crc16 [22]
-----------------------------------------------
                0.02    0.00 1644440/1644440     matrix_test [10]
[23]     0.1    0.02    0.00 1644440         matrix_mul_vect [23]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[24]     0.0    0.00    0.00       1         core_list_init [24]
                0.00    0.00       1/1233331     core_list_mergesort [4]
                0.00    0.00      32/32          core_list_insert_new [27]
-----------------------------------------------
                0.00    0.00  822220/822220      core_bench_list [3]
[25]     0.0    0.00    0.00  822220         core_list_remove [25]
-----------------------------------------------
                0.00    0.00  822220/822220      core_bench_list [3]
[26]     0.0    0.00    0.00  822220         core_list_undo_remove [26]
-----------------------------------------------
                0.00    0.00      32/32          core_list_init [24]
[27]     0.0    0.00    0.00      32         core_list_insert_new [27]
-----------------------------------------------
                0.00    0.00      10/10          main [1]
[28]     0.0    0.00    0.00      10         time_in_secs [28]
-----------------------------------------------
                0.00    0.00       6/6           main [1]
[29]     0.0    0.00    0.00       6         get_seed_args [29]
-----------------------------------------------
                0.00    0.00       6/6           main [1]
[30]     0.0    0.00    0.00       6         get_time [30]
-----------------------------------------------
                0.00    0.00       6/6           main [1]
[31]     0.0    0.00    0.00       6         start_time [31]
-----------------------------------------------
                0.00    0.00       6/6           main [1]
[32]     0.0    0.00    0.00       6         stop_time [32]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[33]     0.0    0.00    0.00       1         check_data_types [33]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[34]     0.0    0.00    0.00       1         core_init_matrix [34]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[35]     0.0    0.00    0.00       1         core_init_state [35]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[36]     0.0    0.00    0.00       1         portable_fini [36]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[37]     0.0    0.00    0.00       1         portable_free [37]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[38]     0.0    0.00    0.00       1         portable_init [38]
-----------------------------------------------
                0.00    0.00       1/1           main [1]
[39]     0.0    0.00    0.00       1         portable_malloc [39]
-----------------------------------------------

 This table describes the call tree of the program, and was sorted by
 the total amount of time spent in each function and its children.

 Each entry in this table consists of several lines.  The line with the
 index number at the left hand margin lists the current function.
 The lines above it list the functions that called this function,
 and the lines below it list the functions this one called.
 This line lists:
     index	A unique number given to each element of the table.
		Index numbers are sorted numerically.
		The index number is printed next to every function name so
		it is easier to look up where the function is in the table.

     % time	This is the percentage of the `total' time that was spent
		in this function and its children.  Note that due to
		different viewpoints, functions excluded by options, etc,
		these numbers will NOT add up to 100%.

     self	This is the total amount of time spent in this function.

     children	This is the total amount of time propagated into this
		function by its children.

     called	This is the number of times the function was called.
		If the function called itself recursively, the number
		only includes non-recursive calls, and is followed by
		a `+' and the number of recursive calls.

     name	The name of the current function.  The index number is
		printed after it.  If the function is a member of a
		cycle, the cycle number is printed between the
		function's name and the index number.


 For the function's parents, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the function into this parent.

     children	This is the amount of time that was propagated from
		the function's children into this parent.

     called	This is the number of times this parent called the
		function `/' the total number of times the function
		was called.  Recursive calls to the function are not
		included in the number after the `/'.

     name	This is the name of the parent.  The parent's index
		number is printed after it.  If the parent is a
		member of a cycle, the cycle number is printed between
		the name and the index number.

 If the parents of the function cannot be determined, the word
 `<spontaneous>' is printed in the `name' field, and all the other
 fields are blank.

 For the function's children, the fields have the following meanings:

     self	This is the amount of time that was propagated directly
		from the child into the function.

     children	This is the amount of time that was propagated from the
		child's children to the function.

     called	This is the number of times the function called
		this child `/' the total number of times the child
		was called.  Recursive calls by the child are not
		listed in the number after the `/'.

     name	This is the name of the child.  The child's index
		number is printed after it.  If the child is a
		member of a cycle, the cycle number is printed
		between the name and the index number.

 If there are any cycles (circles) in the call graph, there is an
 entry for the cycle-as-a-whole.  This entry shows who called the
 cycle (as parents) and the members of the cycle (as children.)
 The `+' recursive calls entry shows the number of function calls that
 were internal to the cycle, and the calls entry for each member shows,
 for that member, how many times it was called from other members of
 the cycle.

Copyright (C) 2012-2022 Free Software Foundation, Inc.

Copying and distribution of this file, with or without modification,
are permitted in any medium without royalty provided the copyright
notice and this notice are preserved.

Index by function name

   [6] calc_func              [25] core_list_remove       [15] matrix_mul_matrix
  [33] check_data_types        [7] core_list_reverse      [13] matrix_mul_matrix_bitextract
   [5] cmp_complex            [26] core_list_undo_remove  [23] matrix_mul_vect
  [19] cmp_idx                [12] core_state_transition  [17] matrix_sum
   [3] core_bench_list        [22] crc16                  [10] matrix_test
   [9] core_bench_matrix      [16] crcu16                 [36] portable_fini
  [11] core_bench_state       [18] crcu32                 [37] portable_free
  [34] core_init_matrix       [14] crcu8                  [38] portable_init
  [35] core_init_state        [29] get_seed_args          [39] portable_malloc
   [8] core_list_find         [30] get_time               [31] start_time
  [24] core_list_init          [2] iterate                [32] stop_time
  [27] core_list_insert_new   [21] matrix_add_const       [28] time_in_secs
   [4] core_list_mergesort    [20] matrix_mul_const
